package virtualmachine

import "testing"

func TestPushInt(t *testing.T) {
	program := [...]byte{
		0x09,                                           // PushInt
		0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF, // random int
		0x00} // End

	stack := [...]byte{
		0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF}

	err := runProgram(program[:], stack[:], nil)
	if err != nil {
		t.Errorf(err.Error())
	}
}

func TestGetInt(t *testing.T) {
	program := [...]byte{
		0x11,                                           // GetByte
		0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // address
		0x00,                                           // End Program
		0x81, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x81} // Value

	stack := [...]byte{
		0x81, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x81}

	err := runProgram(program[:], stack[:], nil)
	if err != nil {
		t.Errorf(err.Error())
	}
}

func TestPutInt(t *testing.T) {
	program := [...]byte{
		0x09,                                           // PushInt
		0xFE, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0xEF, // Operant
		0x19,                                           // Put Int
		0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Operant
		0x00, // End Program
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}

	stack := [...]byte{}

	memory := [...]byte{
		0x09,                                           // see program
		0xFE, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0xEF, // ..
		0x19,                                           // ..
		0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ..
		0x00, // End Program
		0xFE, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0xEF}

	err := runProgram(program[:], stack[:], memory[:])
	if err != nil {
		t.Errorf(err.Error())
	}
}

func TestAddInt(t *testing.T) {
	program := [...]byte{
		0x09,                                           // PushInt
		0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Value
		0x09,                                           // PushInt
		0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Value
		0x21, // AddInt
		0x00} // EndProgram

	stack := [...]byte{
		0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}

	err := runProgram(program[:], stack[:], nil)
	if err != nil {
		t.Errorf(err.Error())
	}
}
